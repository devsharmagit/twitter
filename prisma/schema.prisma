generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  username    String   @unique
  name        String?
  displayName String?
  bio         String?
  job         String?
  location    String?
  website     String?
  img         String?
  cover       String?
  createAt    DateTime @default(now())

  // realtions
  posts      Post[]
  likes      Like[]
  saves      SavedPost[]
  followers  Follow[]    @relation("UserFollowers")
  followings Follow[]    @relation("UserFollowings")
}

model Post {
  id          Int      @id @default(autoincrement())
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // repost posts
  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  // comment posts
  parentPostId Int?
  parentPost   Post?  @relation("CommentPosts", fields: [parentPostId], references: [id])
  comments     Post[] @relation("CommentPosts")

  // like posts
  likes Like[]

  // saved posts
  saves SavedPost[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // relations
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // relations
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // relations
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
}
